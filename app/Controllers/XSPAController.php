<?php
/** Red Framework Controller
 * Generated By Red Analytics
 *
 * Date: 10/01/2020
 * Time: 03:28:28
 * @author RedCoder, RT3N
 */

namespace App\Controllers;


use GuzzleHttp\Client;
use GuzzleHttp\Exception\ConnectException;
use Red\Base\Controller;
use GuzzleHttp\Exception\BadResponseException;

class XSPAController extends Controller
{
    private $api_service;
    private $connection;
    private $connection_status;
    protected $data;


    public function __construct()
    {
        parent::__construct();
        $this->api_service = "http://api.guardiran.org/cloudhound/";
        $this->connection = new Client(['base_uri' => $this->api_service]);

    }

    public function XSPA($hostname, $discovery_target)
    {

        $hostname = str_replace("https://", "", $hostname);
        $hostname = str_replace("http://", "", $hostname);
        $hostname = str_replace("www.", "", $hostname);
        $hostname = trim($hostname, "/");

        $discovery_target = str_replace("https://", "", $discovery_target);
        $discovery_target = str_replace("http://", "", $discovery_target);
        $discovery_target = str_replace("www.", "", $discovery_target);
        $discovery_target = trim($discovery_target, "/");

        // To See Discovery Target is Correct or Not
        $discovery_hostname = substr($discovery_target, 0, strlen($hostname) + 1);

        if ($hostname . "/" != $discovery_hostname) {
            return "wrong_discovery_target";
        }

        $headers = ["content-type" => "application/json;charset=UTF-8",
            "API" => "guardiran"];


        try {
            $this->data = $this->connection->request('POST', "v1/xspa/" . $hostname . "/" . $discovery_target,
                [
                    'headers' => $headers,
                    'form_params' => [
                        'discovery_target' => $discovery_target,
                    ]
                ]
            );
        } catch (BadResponseException $e) {
            $this->data = "false";
        } catch (ConnectException $e) {
            $this->data = "false";
            $this->connection_status = false;
        }

        if ($this->connection_status === false) {
            return "Connection Error";
        }

        $this->connection_status = true;

        if ($this->data == "false") {
            return false;
        } else {
            $this->data = $this->data->getBody();
            $this->data = json_decode($this->data, true);
            return $this->data;
        }

    }

    /**
     * @return mixed
     */
    public function getConnectionStatus()
    {
        return $this->connection_status;
    }

}
